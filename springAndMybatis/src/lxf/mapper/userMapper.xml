<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="lxf.mapper.UserMapper">
<sql id="userResultsql">
id id_, name name_, sex sex_,address  
</sql>

<!-- 定义resultMap
将select id id_, name name_, sex sex_,address from useryee 和 User类中的属性作一个映射关系
type:resultMap 最终映射的Java对象类型，可以别名
id：对resultMap 的唯一标识 -->
<resultMap type="User" id="userResultmap">
<!-- id：表示查询结果集的唯一标识
column：查询出来的列名
property：type指定的pojo类型的属性名
result：对普通列映射定义 -->
<id column="id_" property="id"/>
<result column="name_"  property="name"/>
<result column="sex_" property="sex" />
<result column="address" property="address" />
</resultMap>

<!-- 订单查询关联用户的resultMap
将整个查询结果映射到 com.po.Orders 中 -->
<resultMap type="com.po.Orders" id="OrdersUserRM">
<!-- 配置映射的订单信息 -->
<!-- id:指定查询列的唯一标识，订单信息的唯一标识，如果有多个列组成唯一标识，配置多个id 
column：订单信息的唯一标识列；
property：订单信息的唯一标识列 所映射到的Orders哪个 属性-->
	<id column="id" property="id"/>
	<result column="user_id" property="userId"/>
	<result column="number" property="number"/>
	<result column="createtime" property="createTime"/>
	<result column="note" property="note"/>
<!-- 配置映射的关联用户信息 -->
<!-- association: 用来映射关联查询单个对象信息 
property：要将关联查询的用户信息映射到Orders哪个属性中-->
	<association property="user" javaType="com.po.User">
		<!-- id:关联查询用户的唯一标识
		column：用户信息的唯一标识列；
		property：用户信息的唯一标识列 所映射到 User 哪个属性 -->
		<id column="user_id" property="id"/>
		<result column="name" property="name"/>
		<result column="sex" property="sex"/>
	</association>
</resultMap>

<select id="findOrdersUser" resultMap="OrdersUserRM">
	select orders.* ,useryee.name,useryee.sex
	from orders,useryee
	where orders.user_id = useryee.id
</select>

<!-- 使用extends继承，不用写订单和用户配置 -->
<resultMap type="com.po.Orders" id="OrdersAndOrderDetailRM" extends="OrdersUserRM">
<!-- 一个订单关联查询了多条订单明细，要使用collection 进行映射
collection：对关联查询的多条记录映射到集合对象中
property：将关联查询的多条记录映射到com.po.Orders中哪个属性中
ofType:指定映射到List集合中的pojo属性 -->
<collection property="orderDetails" ofType="com.po.OrderDetail">
<id column="orderdetail_id" property="id"/>
<result column="products_id"  property="productsId"/>
<result column="products_num"  property="productsNum"/>
<result column="orders_id"  property="ordersId"/>
</collection>
</resultMap>

<select id="findOrdersAndOrderDetail" resultMap="OrdersAndOrderDetailRM">
SELECT 
  orders.*,
  useryee.name,
  useryee.sex,
  useryee.address,
  orderdetail.id orderdetail_id,
  orderdetail.products_id,
  orderdetail.products_num,
  orderdetail.orders_id
FROM
  orders,
  useryee,
  orderdetail
WHERE orders.user_id = useryee.id AND orderdetail.orders_id=orders.id

</select>

<!-- 查询用户及购买产品 -->
<resultMap type="com.po.User" id="UserAndProductsRM">
    <!-- 用户信息 -->
    <id column="user_id" property="id"/>
	<result column="name" property="name"/>
	<result column="sex" property="sex"/>
	<!-- 订单信息：一个用户对应多个订单 -->
	<collection property="orderslist" ofType="com.po.Orders">
	    <id column="id" property="id"/>
		<result column="number" property="number"/>
		<result column="createtime" property="createTime"/>
		<result column="note" property="note"/>
		<!-- 订单明细：一个订单对应多个订单明细 -->
		<collection property="orderDetails" ofType="com.po.OrderDetail">
		    <id column="orderdetail_id" property="id"/>
			<result column="products_num"  property="productsNum"/>
			<!-- 产品信息：一个订单明细对应一个产品 -->
			<association property="products" javaType="com.po.Products">
			  <id column="products_id" property="id"/>
			  <result column="products_name" property="name"/>
			  <result column="products_price" property="price"/>
			  <result column="products_detail" property="detail"/>
			</association>
		</collection>
	</collection>
</resultMap>

<select id="findUserAndProducts" resultMap="UserAndProductsRM">
	SELECT 
	  orders.*,
	  useryee.name,
	  useryee.sex,
	  useryee.address,
	  orderdetail.id orderdetail_id,
	  orderdetail.products_id,
	  orderdetail.products_num,
	  orderdetail.orders_id,
	  products.name products_name,
	  products.price  products_price,
	  products.detail products_detail
	FROM
	  orders,
	  useryee,
	  orderdetail,
	  products
	WHERE orders.user_id = useryee.id AND orderdetail.orders_id=orders.id AND orderdetail.products_id=products.id
</select>

<select id="findUserByName"  parameterType="java.lang.String"  resultType="com.po.User">
select * from useryee where name like '%${value}%'
</select>

<select id="findUserListById" parameterType="userQueryVo" resultMap="userResultmap">
<!-- 引用sql片段 id,如果refid不在本mapper.xml中，需要前边加上对应的namespace -->
select
<include refid="userResultsql"/>
from useryee
<where>
<if test="ids != null">
<!-- 使用foreach遍历传入参数
collection:指定输入对象中集合属性
item：每次遍历生成的对象
open:开始遍历是拼接的字符串
close:结束遍历时拼接的字符串
separator： 遍历中 俩个对象 之间连接的 分隔符 -->
<foreach collection="ids" item="user_id" open=" id in(" close=")" separator=",">
#{user_id}
</foreach>
</if>
</where>
</select>

<insert id="insertUser" parameterType="User">
<!-- 
将插入数据的主键返回，返回到对象中
select last_insert_id()：得到刚 insert 记录的主键id，只适用在主键自增。
keyProperty：将查询到的主键值  设置到 parameterType 指定的对象哪个属性中。
order：select last_insert_id()的 执行顺序，相对于 insert 语句的  执行顺序。
resultType： 指定 select last_insert_id() 的结果类型
 -->
<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
select last_insert_id()
</selectKey>
insert into useryee(name,sex,address) values(#{name},#{sex},#{address})
</insert>

<select id="findUserCount" parameterType="UserQueryVo" resultType="int">
select count(*) from useryee
<where>
<!-- 用户信息综合查询
 #{userChild.sex}：取出pojo包装对象中的sex值
 -->
<if test="userChild != null">
  <if test="userChild.sex != null and userChild.sex != ''">
      useryee.sex = #{userChild.sex}
  </if>
  <if test="userChild.name != null and userChild.name != ''">
      and useryee.name like concat('%',#{userChild.name},'%')
  </if>
</if>
</where>

</select>

<select id="findUserById" parameterType="Integer" resultType="com.po.User">
  select * from useryee where id=#{id}
</select>
</mapper>